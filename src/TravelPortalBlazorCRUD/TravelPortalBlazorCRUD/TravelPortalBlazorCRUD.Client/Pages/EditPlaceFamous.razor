@page "/edit-place"
@page "/edit-place/{id:guid}"

@inject NavigationManager Navigation
@inject ICityService CityService
@inject IPlaceFamousService PlaceService


@rendermode InteractiveAuto

@if (Id == null)
{
    <h3>Додати новий місце</h3>
}
else
{
    <h3>Редагувати @place.Name</h3>
}

<EditForm Model="place" OnSubmit="HandleSubmit" FormName="placeForm">
    <label>Назва</label>
    <InputText @bind-Value="place.Name" class="form-control" required />

    <label>Рейтинг</label>
    <InputTextArea @bind-Value="place.Description" class="form-control"required />

    <label>Фото</label>
    <InputFile OnChange="HandleFileSelected" class="form-control" />
    <label>Місто</label>
    <InputSelect @bind-Value="place.CityId" class="form-control">
        <option>select city</option>
        @foreach (var city in cities)
        {
            <option value="@city.Id">@city.Name</option>
        }
    </InputSelect>
    <button type="submit" class="btn btn-primary">Відправити</button>
    @if (Id != null)
    {
        <button @onclick="DeletePlace" type="button" class="btn btn-danger">Видалити</button>
    }
</EditForm>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    PlaceFamous place { get; set; } = new PlaceFamous();
    private List<City> cities = new List<City>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCities();
        if (Id != null)
        {
            place = await PlaceService.GetByIdAsync((Guid)Id);
            if (place == null)
            {
                Navigation.NavigateTo("placefamous");
            }
        }
    }

    private async Task LoadCities()
    {
        cities = await CityService.GetAllCity();
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await PlaceService.CreateAsync(place);
        }
        else
        {
            await PlaceService.UpdateAsync((Guid)Id, place);
        }
        Navigation.NavigateTo("placefamous");
    }

    async Task DeletePlace()
    {
        if (Id != null)
        {
            await PlaceService.DeleteAsync((Guid)Id);
            Navigation.NavigateTo("placefamous");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            place.Photo = ms.ToArray();
        }
    }
}
